--- src/backend/main/main.c
+++ src/backend/main/main.c
@@ -385,6 +385,8 @@ help(const char *progname)
 static void
 check_root(const char *progname)
 {
+	return;
+	
 #ifndef WIN32
 	if (geteuid() == 0)
 	{
--- src/backend/utils/init/miscinit.c
+++ src/backend/utils/init/miscinit.c
@@ -388,7 +388,7 @@ checkDataDir(void)
 	 * be proper support for Unix-y file permissions.  Need to think of a
 	 * reasonable check to apply on Windows.
 	 */
-#if !defined(WIN32) && !defined(__CYGWIN__)
+#if !defined(WIN32) && !defined(__CYGWIN__) && 0
 	if (stat_buf.st_mode & PG_MODE_MASK_GROUP)
 		ereport(FATAL,
 				(errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),
@@ -409,7 +409,7 @@ checkDataDir(void)
 	 * Suppress when on Windows, because there may not be proper support for
 	 * Unix-y file permissions.
 	 */
-#if !defined(WIN32) && !defined(__CYGWIN__)
+#if !defined(WIN32) && !defined(__CYGWIN__) && 0
 	SetDataDirectoryCreatePerm(stat_buf.st_mode);
 
 	umask(pg_mode_mask);
--- src/bin/pg_ctl/pg_ctl.c
+++ src/bin/pg_ctl/pg_ctl.c
@@ -2244,7 +2244,7 @@ main(int argc, char **argv)
 	/*
 	 * Disallow running as root, to forestall any possible security holes.
 	 */
-#ifndef WIN32
+#if 0
 	if (geteuid() == 0)
 	{
 		write_stderr(_("%s: cannot be run as root\n"
--- src/bin/pg_upgrade/option.c
+++ src/bin/pg_upgrade/option.c
@@ -97,8 +97,8 @@ parseCommandLine(int argc, char *argv[])
 	}
 
 	/* Allow help and version to be run as root, so do the test here. */
-	if (os_user_effective_id == 0)
-		pg_fatal("%s: cannot be run as root", os_info.progname);
+	// if (os_user_effective_id == 0)
+	// 	pg_fatal("%s: cannot be run as root", os_info.progname);
 
 	while ((option = getopt_long(argc, argv, "b:B:cd:D:j:kNo:O:p:P:rs:U:v",
 								 long_options, &optindex)) != -1)
